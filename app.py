import streamlit as st
import pandas as pd
import io
import datetime

# ----------------------
# Page Config with Theme
# ----------------------
st.set_page_config(
    page_title="üìë Automation Tools",
    layout="wide",
    page_icon="üìä"
)

# ----------------------
# Custom CSS for Styling
# ----------------------
st.markdown("""
    <style>
        /* Main background */
        .main {
            background-color: #ffffff;
            color: #000000;
        }

        /* Sidebar */
        section[data-testid="stSidebar"] {
            background-color: #ffffff;
        }

        /* Title */
        h1, h2, h3, h4, h5, h6 {
            color: #987049;
        }

        /* Buttons */
        .stButton>button {
            background-color: #987049;
            color: white;
            border-radius: 12px;
            padding: 8px 20px;
            font-weight: bold;
            border: none;
        }
        .stButton>button:hover {
            background-color: #7a593a;
            color: #ffffff;
        }

        /* Metrics Card */
        div[data-testid="stMetricValue"] {
            color: #987049;
            font-weight: bold;
        }

        /* Dataframe Styling */
        .stDataFrame, .stTable {
            border: 1px solid #987049;
            border-radius: 8px;
        }
    </style>
""", unsafe_allow_html=True)

# ========================
# Functions
# ========================
"""def parse_vietnamese_date(value: str) -> pd.Timestamp:
    if isinstance(value, str):
        parts = value.split()
        if len(parts) == 4 and parts[1].lower() == 'thg':
            day, _, month, year = parts
            try:
                date_str = f"{day}-{month}-{year}"
                return pd.to_datetime(date_str, format="%d/%m/%Y", errors="coerce")
            except Exception:
                return pd.NaT
    return pd.NaT"""
def parse_vietnamese_date(value: str) -> pd.Timestamp:
    if isinstance(value, str):
        parts = value.strip().split()
        # D·∫°ng "13 thg 08 2025"
        if len(parts) == 4 and parts[1].lower() == 'thg':
            day, _, month, year = parts
            date_str = f"{day}/{month}/{year}"
            return pd.to_datetime(date_str, format="%d/%m/%Y", errors="coerce")
        # D·∫°ng "13/08/2025" ho·∫∑c "13-08-2025"
        return pd.to_datetime(value, dayfirst=True, errors='coerce')
    return pd.NaT


def detect_header_row(df_raw):
    for idx, row in df_raw.iterrows():
        if row.astype(str).str.contains('STT', na=False).any():
            return idx
    raise ValueError("Kh√¥ng t√¨m th·∫•y d√≤ng header ch·ª©a 'STT'")

def load_and_flatten_eas(eas_bytes):
    df_raw = pd.read_excel(io.BytesIO(eas_bytes), header=None)
    df_raw.iloc[:, 0] = df_raw.iloc[:, 0].astype(str)
    df_raw = df_raw[~df_raw.iloc[:, 0].str.contains(r'^\[\d+\]$', na=False)].reset_index(drop=True)
    header_row = detect_header_row(df_raw)
    df = pd.read_excel(io.BytesIO(eas_bytes), header=[header_row, header_row+1])

    flat_cols = []
    for top, sub in df.columns:
        if pd.notna(sub) and not str(sub).startswith("Unnamed"):
            flat_cols.append(str(sub).strip())
        else:
            flat_cols.append(str(top).strip())
    df.columns = flat_cols
    return df

def clean_eas(df):
    rename_map = {
        'T√™n ng∆∞·ªùi mua(Buyer Name)': 'Buyer Name',
        'Ng√†y, th√°ng, nƒÉm ph√°t h√†nh': 'ISSUE_DATE',
        'Doanh s·ªë b√°n ch∆∞a c√≥ thu·∫ø(Revenue excluding VAT)': 'Revenue_ex_VAT',
        'Thu·∫ø GTGT(VAT amount)': 'VAT_Amount',
        'K√Ω hi·ªáu m·∫´u h√≥a ƒë∆°n': 'InvoiceSerial',
        'S·ªë h√≥a ƒë∆°n': 'InvoiceNumber'
    }
    df = df.rename(columns=rename_map)
    mst_col = next((c for c in df.columns if 'M√£ s·ªë thu·∫ø' in c or 'Tax code' in c), None)
    if mst_col:
        df = df.rename(columns={mst_col: 'TaxCode'})
    df = df.dropna(subset=['Buyer Name', 'Revenue_ex_VAT']).reset_index(drop=True)
    return df

def build_fiv(df_eas, df_kh):
    taxkey_kh = next((c for c in df_kh.columns if any(x in c for x in ['MST','CMND','PASSPORT','Tax code'])), None)
    records = []
    for idx, row in df_eas.iterrows():
        buyer = row['Buyer Name']
        cust_acc = pd.NA
        if 'TaxCode' in row and pd.notna(row['TaxCode']) and taxkey_kh:
            m = df_kh[df_kh[taxkey_kh] == row['TaxCode']]['Customer account']
            if not m.empty:
                cust_acc = m.iat[0]
        if pd.isna(cust_acc):
            m = df_kh[df_kh['Name'] == buyer]['Customer account']
            if not m.empty:
                cust_acc = m.iat[0]

        line_amount = row['Revenue_ex_VAT']
        vat_amount  = row.get('VAT_Amount', 0)
        total_amt   = line_amount + vat_amount

        records.append({
            'IdRef': idx + 1,
            'InvoiceDate': row['ISSUE_DATE'],
            'DocumentDate': row['ISSUE_DATE'],
            'CurrencyCode': 'VND',
            'CustAccount': cust_acc,
            'InvoiceAccount': cust_acc,
            'SalesName': buyer,
            'APMA_DimA': 'TX',
            'APMC_DimC': '0000',
            'APMD_DimD': '00',
            'APMF_DimF': '0000',
            'TaxGroupHeader': 'OU',
            'PostingProfile': '131103',
            'LineNum': 1,
            'Description': 'Doanh thu d·ªãch v·ª• spa',
            'SalesPrice': line_amount,
            'SalesQty': 1,
            'LineAmount': line_amount,
            'TaxAmount': vat_amount,
            'TotalAmount': total_amt,
            'TaxGroupLine': 'OU',
            'TaxItemGroup': '10%',
            'Line_MainAccountId': '511301',
            'Line_APMA_DimA': 'TX',
            'Line_APMC_DimC': '5301',
            'Line_APMD_DimD': '00',
            'Line_APMF_DimF': '0000',
            'BHS_VATInvocieDate_VATInvoice': row['ISSUE_DATE'],
            'BHS_Form_VATInvoice': '',
            'BHS_Serial_VATInvoice': row.get('InvoiceSerial', ''),
            'BHS_Number_VATInvoice': row.get('InvoiceNumber', ''),
            'BHS_Description_VATInvoice': 'Doanh thu d·ªãch v·ª• spa'
        })

    cols_order = [
        'IdRef','InvoiceDate','DocumentDate','CurrencyCode','CustAccount','InvoiceAccount',
        'SalesName','APMA_DimA','APMC_DimC','APMD_DimD','APMF_DimF','TaxGroupHeader',
        'PostingProfile','LineNum','Description','SalesPrice','SalesQty','LineAmount',
        'TaxAmount','TotalAmount','TaxGroupLine','TaxItemGroup','Line_MainAccountId',
        'Line_APMA_DimA','Line_APMC_DimC','Line_APMD_DimD','Line_APMF_DimF',
        'BHS_VATInvocieDate_VATInvoice','BHS_Form_VATInvoice','BHS_Serial_VATInvoice',
        'BHS_Number_VATInvoice','BHS_Description_VATInvoice'
    ]
    return pd.DataFrame(records, columns=cols_order)

# ========================
# Sidebar
# ========================
st.sidebar.title("‚öôÔ∏è Ch·ª©c nƒÉng")
tool_choice = st.sidebar.radio(
    "Ch·ªçn c√¥ng c·ª•",
    ["Senspa Automation Excel-AX", "Agoda LCB"],
    index=0,
)

# ========================
# Main Tools
# ========================
if tool_choice == "Senspa Automation Excel-AX":
    st.title("üßæ FIV Generator")
    st.markdown("""
    <div style="padding:10px; border-radius:10px; background-color:#f9f9f9; border:1px solid #987049;">
    Upload hai file <b>EAS.xlsx</b> v√† <b>KH.xlsx</b>, ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông sinh file <b>Completed_FIV.xlsx</b><br>
    üîé Lookup ∆∞u ti√™n theo <b>MST/Tax code</b><br>
    ‚Ü©Ô∏è Fallback theo <b>Buyer Name</b><br>
    ‚ûï T√≠nh <b>TotalAmount = Revenue_ex_VAT + VAT_Amount</b>
    </div>
    """, unsafe_allow_html=True)

    eas_file = st.file_uploader("üìÇ Ch·ªçn file EAS.xlsx", type="xlsx", key="eas")
    kh_file  = st.file_uploader("üìÇ Ch·ªçn file KH.xlsx", type="xlsx", key="kh")

    if eas_file and kh_file:
        try:
            df_kh     = pd.read_excel(kh_file)
            eas_bytes = eas_file.read()

            df_raw = load_and_flatten_eas(eas_bytes)
            df_eas = clean_eas(df_raw)
            df_fiv = build_fiv(df_eas, df_kh)

            df_fiv['IdRef'] = df_fiv['IdRef'].astype(str)
            date_cols = ['InvoiceDate', 'DocumentDate', 'BHS_VATInvocieDate_VATInvoice']
            for c in date_cols:
                #df_fiv[c] = pd.to_datetime(df_fiv[c]).dt.date
                df_fiv[c] = (
                    pd.to_datetime(df_fiv[c], dayfirst=True, errors='coerce')
                        .dt.date
    )

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter', date_format='dd/mm/yyyy') as writer:
                df_fiv.to_excel(writer, index=False, sheet_name='FIV')

            output.seek(0)
            st.download_button(
                "üì• T·∫£i Completed_FIV.xlsx",
                data=output.getvalue(),
                file_name="Completed_FIV.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        except Exception as e:
            st.error(f"‚ùå C√≥ l·ªói: {e}")

elif tool_choice == "Agoda LCB":
    st.title("üè® Agoda LCB Processor")
    st.markdown("""
    <div style="padding:10px; border-radius:10px; background-color:#f9f9f9; border:1px solid #987049;">
    üì§ T·∫£i l√™n file Excel ƒë·ªëi chi·∫øu t·ª´ Agoda, ch·ªçn kho·∫£ng ng√†y tr·∫£ ph√≤ng mu·ªën l·ªçc,<br>
    v√† ·ª©ng d·ª•ng s·∫Ω xu·∫•t ra file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
    </div>
    """, unsafe_allow_html=True)

    today = datetime.date.today()
    default_start = today - datetime.timedelta(days=7)
    default_end = today
    col1, col2 = st.columns(2)
    start_date = col1.date_input("üìÖ Ng√†y b·∫Øt ƒë·∫ßu", value=default_start, max_value=today)
    end_date = col2.date_input("üìÖ Ng√†y k·∫øt th√∫c", value=default_end, max_value=today)

    if start_date > end_date:
        st.error("‚ö†Ô∏è Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c.")

    agoda_file = st.file_uploader("üìÇ Ch·ªçn file Agoda (Excel)", type=["xlsx"], key="agoda")

    if agoda_file and (start_date <= end_date):
        try:
            # C√°c c·ªôt b·∫Øt bu·ªôc c·∫ßn c√≥ trong sheet
            required_cols = {"Ng√†y tr·∫£ ph√≤ng", "Doanh thu th·ª±c", "S·ªë ti·ªÅn b·ªã tr·ª´"}

            # ƒê·ªçc danh s√°ch sheet tr∆∞·ªõc
            xls = pd.ExcelFile(agoda_file)

            # T√¨m c√°c sheet h·ª£p l·ªá (ƒë·ªß c·ªôt)
            candidate_sheets = []
            for sh in xls.sheet_names:
                tmp = pd.read_excel(xls, sheet_name=sh, nrows=5)  # ƒë·ªçc nh·∫π ƒë·ªÉ ki·ªÉm tra c·ªôt
                if required_cols.issubset(set(tmp.columns)):
                    candidate_sheets.append(sh)

            if not candidate_sheets:
                raise ValueError(
                    "Kh√¥ng t√¨m th·∫•y sheet n√†o c√≥ ƒë·ªß c√°c c·ªôt b·∫Øt bu·ªôc: "
                    + ", ".join(sorted(required_cols))
                )

            # N·∫øu c√≥ nhi·ªÅu sheet h·ª£p l·ªá, cho ng∆∞·ªùi d√πng ch·ªçn
            if len(candidate_sheets) > 1:
                chosen_sheet = st.selectbox(
                    "üßæ Ch·ªçn sheet c·∫ßn x·ª≠ l√Ω",
                    options=candidate_sheets,
                    index=0,
                    help="H·ªá th·ªëng t√¨m th·∫•y nhi·ªÅu sheet ph√π h·ª£p. H√£y ch·ªçn sheet ƒë√∫ng ƒë·ªÉ x·ª≠ l√Ω."
                )
            else:
                chosen_sheet = candidate_sheets[0]

            # === THAY CHO D√íNG C≈®: df = pd.read_excel(agoda_file, sheet_name="file t·∫£i xu·ªëng t·ª´ Agoda")
            df = pd.read_excel(xls, sheet_name=chosen_sheet)
            # === H·∫æT PH·∫¶N THAY ===

            # Chu·∫©n h√≥a d·ªØ li·ªáu nh∆∞ c≈©
            df["Ng√†y tr·∫£ ph√≤ng"] = df["Ng√†y tr·∫£ ph√≤ng"].apply(parse_vietnamese_date)

            df["Doanh thu th·ª±c"] = (
                df["Doanh thu th·ª±c"].astype(str)
                .str.replace(",", "", regex=False)
                .str.strip()
                .astype(float)
            )
            df["S·ªë ti·ªÅn b·ªã tr·ª´"] = (
                df["S·ªë ti·ªÅn b·ªã tr·ª´"].astype(str)
                .str.replace(",", "", regex=False)
                .str.strip()
                .astype(float)
            )

            start_ts = pd.to_datetime(start_date)
            end_ts = pd.to_datetime(end_date)
            mask_date = (df["Ng√†y tr·∫£ ph√≤ng"] >= start_ts) & (df["Ng√†y tr·∫£ ph√≤ng"] <= end_ts)
            df_filtered = df.loc[mask_date].copy()
            df_filtered = df_filtered[
                (df_filtered["Doanh thu th·ª±c"] > 0) & (df_filtered["S·ªë ti·ªÅn b·ªã tr·ª´"] > 0)
            ]
            df_filtered = df_filtered.loc[:, ~df_filtered.columns.str.contains("^Unnamed")]

            st.subheader("üìä B·∫£ng d·ªØ li·ªáu sau khi l·ªçc")
            st.dataframe(df_filtered)

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                df_filtered.to_excel(writer, index=False, sheet_name="Agoda")
            output.seek(0)
            file_name = f"Agoda_processed_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"
            st.download_button(
                "üì• T·∫£i file Agoda ƒë√£ x·ª≠ l√Ω",
                data=output.getvalue(),
                file_name=file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        except Exception as e:
            st.error(f"‚ùå C√≥ l·ªói khi x·ª≠ l√Ω file Agoda: {e}")